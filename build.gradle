plugins {
	id 'org.springframework.boot' version '2.3.5.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	id 'scala'
	id 'jacoco'
	id "org.sonarqube" version "3.0"
	id 'net.linguica.maven-settings' version '0.5'
}

group = 'com.scb.rider'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
	maven {
		name 'rider-maven-release'
		url 'https://nexus.devops.easy2easiest.com/repository/rider-maven-release-local'
		credentials {
			username System.getenv("NEXUS_USER")
			password System.getenv("NEXUS_PASSWORD")
		}
	}
}

/*
sourceSets{
	simulations{
		scala{
			srcDirs  = ['simulations/load']
		}
		resources{
			srcDirs  = ['simulations/resources']
		}
	}
}
*/


task testLoad(type: JavaExec) {
	description = 'Test load the Spring Boot web service with Gatling'
	group = 'Load Test'
	classpath = sourceSets.test.runtimeClasspath
	jvmArgs = [
			// workaround for https://github.com/gatling/gatling/issues/2689
			// "-Dgatling.core.directory.binaries=${sourceSets.test.output.classesDirs.toString()}",
			"-Dlogback.configurationFile=${logbackGatlingConfig()}"
	]
	main = 'io.gatling.app.Gatling'
	args = [
			'--simulation', 'RiderDetailsSimulation',
			'--results-folder', "${buildDir}/gatling-results",
			// '--binaries-folder', sourceSets.test.output.classesDirs.toString() // ignored because of above bug
	]
}

def logbackGatlingConfig() {
	return sourceSets.test.resources.find { it.name == 'logback-gatling.xml'};
}
ext {
	set('springCloudVersion', 'Hoxton.SR5')
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
	//implementation group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.11.918'
	implementation group: 'com.github.gustavovitor', name: 'maker-mongo', version: '1.4.1'
	implementation group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.11.415'
	implementation group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis', version: '2.3.5.RELEASE'
	implementation group: 'com.amazonaws', name: 'aws-java-sdk-core', version: '1.12.62'

	compile group: 'io.springfox', name: 'springfox-swagger2', version: '3.0.0'
	compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '3.0.0'
	//implementation "io.springfox:springfox-bean-validators:3.0.0"
	compile group: 'com.auth0', name: 'java-jwt', version: '3.12.1'
	implementation 'com.auth0:jwks-rsa:0.15.0'

	implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'

	implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.4.8'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '2.3.5.RELEASE'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: '2.3.5.RELEASE'
	implementation group: 'org.springframework.boot', name: 'spring-boot-devtools', version: '2.3.5.RELEASE'

	compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: '2.4.0'

	implementation group: 'commons-io', name: 'commons-io', version: '2.8.0'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	compileOnly 'org.projectlombok:lombok:1.18.16'
	annotationProcessor 'org.projectlombok:lombok:1.18.16'

	testCompileOnly 'org.projectlombok:lombok:1.18.16'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.16'

	testImplementation("org.junit.platform:junit-platform-launcher:1.6.1")
	testImplementation("org.junit.jupiter:junit-jupiter-engine:5.6.1")
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.1'
	testImplementation('org.mockito:mockito-junit-jupiter:2.23.0')
	testCompile 'org.mockito:mockito-core:2.21.0'
	compile('org.apache.maven.plugins:maven-surefire-plugin:2.21.0') {
		exclude group: 'org.codehaus.plexus', module: 'plexus-utils'
	}
	testCompile 'org.junit.platform:junit-platform-runner:1.2.0'
	testCompile 'org.junit.vintage:junit-vintage-engine:5.2.0'

	testImplementation('de.flapdoodle.embed:de.flapdoodle.embed.mongo')
	testImplementation 'io.cucumber:cucumber-java:6.8.1'
	testImplementation 'io.cucumber:cucumber-junit:6.8.1'
	testImplementation 'io.cucumber:cucumber-spring:6.8.1'
	implementation group: 'io.gatling.highcharts', name: 'gatling-charts-highcharts', version: '3.4.1'

	implementation 'org.springframework.kafka:spring-kafka:2.5.7.RELEASE'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
//	implementation 'net.logstash.logback:logstash-logback-encoder:5.2'
	compile group: 'org.apache.poi', name: 'poi', version: '5.0.0'
	compile group: 'org.apache.poi', name: 'poi-ooxml', version: '5.0.0'
	implementation group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.1.1'

	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis', version: '2.3.5.RELEASE'
	implementation group: 'com.amazonaws', name: 'aws-java-sdk-iam', version: '1.9.21'
	implementation group: 'com.amazonaws', name: 'aws-java-sdk-cognitoidp', version: '1.12.19'

	// added to export custom metrics
	implementation group: 'io.micrometer', name: 'micrometer-core', version: '1.6.3'
	implementation group: 'io.micrometer', name: 'micrometer-registry-prometheus', version: '1.6.3'
	implementation 'com.scb.rider:distributed-tracing-lib:0.0.20'

}
def jacocoExclude = ['**/view/**','**/config/**','**/aop/logging/**','**/kafka/**']

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}


test {
	useJUnitPlatform()
	jacoco {
		finalizedBy jacocoTestReport
		destinationFile = file("build/jacoco/sonar.exec")
	}
	jacocoTestReport {
		dependsOn test
	}
	testLogging {
		events 'PASSED', 'FAILED', 'SKIPPED'
		showStandardStreams = true
	}
}

jacocoTestReport {
	reports {
		xml.enabled true
		csv.enabled true
		html.destination file("${buildDir}/jacocoHtml")
	}
	afterEvaluate {
		getClassDirectories().setFrom(classDirectories.files.collect {
			fileTree(dir: it, exclude: coverageExcludes())
		})
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.30
			}
		}
	}
	afterEvaluate {
		getClassDirectories().setFrom(classDirectories.files.collect {
			fileTree(dir: it, exclude: coverageExcludes())
		})
	}
}

check.dependsOn jacocoTestCoverageVerification


static def coverageExcludes() {
	return ["com/scb/rider/config/**",
			"com/scb/rider/constants/**",
			"com/scb/rider/repository/**",
			"com/scb/rider/exception/**",
			"com/scb/rider/view/**",
			"com/scb/rider/aop/logging/**"]
}

sonarqube {
	properties {
		property 'sonar.coverage.exclusions', coverageExcludes()
	}
}

configurations {
	cucumberRuntime {
		extendsFrom testImplementation
	}
}
task cucumber() {
	dependsOn assemble, testClasses
	doLast {
		javaexec {
			main = "io.cucumber.core.cli.Main"
			classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
			args = ['--plugin', 'pretty', '--glue', 'com.scb.rider.bdd', 'src/test/resources']
		}
	}
}

 bootRun {
	// support passing -Dsystem.property=value to bootRun task
	systemProperties = System.properties
}